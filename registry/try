TMUX(1)                                                      BSD General Commands Manual                                                      TMUX(1)

[1mNAME[0m
     [1mtmux [22m‚Äî terminal multiplexer

[1mSYNOPSIS[0m
     [1mtmux [22m[[1m-2CDluvV[22m] [[1m-c [4m[22mshell-command[24m] [[1m-f [4m[22mfile[24m] [[1m-L [4m[22msocket-name[24m] [[1m-S [4m[22msocket-path[24m] [[1m-T [4m[22mfeatures[24m] [[4mcommand[24m [[4mflags[24m]]

[1mDESCRIPTION[0m
     [1mtmux [22mis a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen.  [1mtmux [22mmay be de‚Äê
     tached from a screen and continue running in the background, then later reattached.

     When [1mtmux [22mis started, it creates a new [4msession[24m with a single [4mwindow[24m and displays it on screen.  A status line at the bottom of the screen shows
     information on the current session and is used to enter interactive commands.

     A session is a single collection of [4mpseudo[24m [4mterminals[24m under the management of [1mtmux[22m.  Each session has one or more windows linked to it.  A window
     occupies the entire screen and may be split into rectangular panes, each of which is a separate pseudo terminal (the pty(4) manual page docu‚Äê
     ments the technical details of pseudo terminals).  Any number of [1mtmux [22minstances may connect to the same session, and any number of windows may
     be present in the same session.  Once all sessions are killed, [1mtmux [22mexits.

     Each session is persistent and will survive accidental disconnection (such as ssh(1) connection timeout) or intentional detaching (with the ‚ÄòC-b
     d‚Äô key strokes).  [1mtmux [22mmay be reattached using:

           $ tmux attach

     In [1mtmux[22m, a session is displayed on screen by a [4mclient[24m and all sessions are managed by a single [4mserver[24m.  The server and each client are separate
     processes which communicate through a socket in [4m/tmp[24m.

     The options are as follows:

     [1m-2            [22mForce [1mtmux [22mto assume the terminal supports 256 colours.  This is equivalent to [1m-T [4m[22m256[24m.

     [1m-C            [22mStart in control mode (see the [4mCONTROL[24m [4mMODE[24m section).  Given twice ([1m-CC[22m) disables echo.

     [1m-c [4m[22mshell-command[0m
                   Execute [4mshell-command[24m using the default shell.  If necessary, the [1mtmux [22mserver will be started to retrieve the [1mdefault-shell [22mop‚Äê
                   tion.  This option is for compatibility with sh(1) when [1mtmux [22mis used as a login shell.

     [1m-D            [22mDo not start the [1mtmux [22mserver as a daemon.  This also turns the [1mexit-empty [22moption off.  With [1m-D[22m, [4mcommand[24m may not be specified.

     [1m-f [4m[22mfile[24m       Specify an alternative configuration file.  By default, [1mtmux [22mloads the system configuration file from [4m/etc/tmux.conf[24m, if present,
                   then looks for a user configuration file at [4m~/.tmux.conf,[24m [4m$XDG_CONFIG_HOME/tmux/tmux.conf[24m or [4m~/.config/tmux/tmux.conf[24m.

                   The configuration file is a set of [1mtmux [22mcommands which are executed in sequence when the server is first started.  [1mtmux [22mloads con‚Äê
                   figuration files once when the server process has started.  The [1msource-file [22mcommand may be used to load a file later.

                   [1mtmux [22mshows any error messages from commands in configuration files in the first session created, and continues to process the rest
                   of the configuration file.

     [1m-L [4m[22msocket-name[0m
                   [1mtmux [22mstores the server socket in a directory under TMUX_TMPDIR or [4m/tmp[24m if it is unset.  The default socket is named [4mdefault[24m.  This
                   option allows a different socket name to be specified, allowing several independent [1mtmux [22mservers to be run.  Unlike [1m-S [22ma full path
                   is not necessary: the sockets are all created in a directory [4mtmux-UID[24m under the directory given by TMUX_TMPDIR or in [4m/tmp[24m.  The
                   [4mtmux-UID[24m directory is created by [1mtmux [22mand must not be world readable, writable or executable.

                   If the socket is accidentally removed, the SIGUSR1 signal may be sent to the [1mtmux [22mserver process to recreate it (note that this
                   will fail if any parent directories are missing).

     [1m-l            [22mBehave as a login shell.  This flag currently has no effect and is for compatibility with other shells when using tmux as a login
                   shell.

     [1m-N            [22mDo not start the server even if the command would normally do so (for example [1mnew-session [22mor [1mstart-server[22m).

     [1m-S [4m[22msocket-path[0m
                   Specify a full alternative path to the server socket.  If [1m-S [22mis specified, the default socket directory is not used and any [1m-L[0m
                   flag is ignored.

     [1m-u            [22mWrite UTF-8 output to the terminal even if the first environment variable of LC_ALL, LC_CTYPE, or LANG that is set does not con‚Äê
                   tain "UTF-8" or "UTF8".  This is equivalent to [1m-T [4m[22mUTF-8[24m.

     [1m-T [4m[22mfeatures[24m   Set terminal features for the client.  This is a comma-separated list of features.  See the [1mterminal-features [22moption.

     [1m-v            [22mRequest verbose logging.  Log messages will be saved into [4mtmux-client-PID.log[24m and [4mtmux-server-PID.log[24m files in the current direc‚Äê
                   tory, where [4mPID[24m is the PID of the server or client process.  If [1m-v [22mis specified twice, an additional [4mtmux-out-PID.log[24m file is gen‚Äê
                   erated with a copy of everything [1mtmux [22mwrites to the terminal.

                   The SIGUSR2 signal may be sent to the [1mtmux [22mserver process to toggle logging between on (as if [1m-v [22mwas given) and off.

     [1m-V            [22mReport the [1mtmux [22mversion.

     [4mcommand[24m [[4mflags[24m]
                   This specifies one of a set of commands used to control [1mtmux[22m, as described in the following sections.  If no commands are speci‚Äê
                   fied, the [1mnew-session [22mcommand is assumed.

[1mDEFAULT KEY BINDINGS[0m
     [1mtmux [22mmay be controlled from an attached client by using a key combination of a prefix key, ‚ÄòC-b‚Äô (Ctrl-b) by default, followed by a command key.

     The default command key bindings are:

           C-b         Send the prefix key (C-b) through to the application.
           C-o         Rotate the panes in the current window forwards.
           C-z         Suspend the [1mtmux [22mclient.
           !           Break the current pane out of the window.
           "           Split the current pane into two, top and bottom.
           #           List all paste buffers.
           $           Rename the current session.
           %           Split the current pane into two, left and right.
           &           Kill the current window.
           '           Prompt for a window index to select.
           (           Switch the attached client to the previous session.
           )           Switch the attached client to the next session.
           ,           Rename the current window.
           -           Delete the most recently copied buffer of text.
           .           Prompt for an index to move the current window.
           0 to 9      Select windows 0 to 9.
           :           Enter the [1mtmux [22mcommand prompt.
           ;           Move to the previously active pane.
           =           Choose which buffer to paste interactively from a list.
           ?           List all key bindings.
           D           Choose a client to detach.
           L           Switch the attached client back to the last session.
           [           Enter copy mode to copy text or view the history.
           ]           Paste the most recently copied buffer of text.
           c           Create a new window.
           d           Detach the current client.
           f           Prompt to search for text in open windows.
           i           Display some information about the current window.
           l           Move to the previously selected window.
           m           Mark the current pane (see [1mselect-pane -m[22m).
           M           Clear the marked pane.
           n           Change to the next window.
           o           Select the next pane in the current window.
           p           Change to the previous window.
           q           Briefly display pane indexes.
           r           Force redraw of the attached client.
           s           Select a new session for the attached client interactively.
           t           Show the time.
           w           Choose the current window interactively.
           x           Kill the current pane.
           z           Toggle zoom state of the current pane.
           {           Swap the current pane with the previous pane.
           }           Swap the current pane with the next pane.
           ~           Show previous messages from [1mtmux[22m, if any.
           Page Up     Enter copy mode and scroll one page up.
           Up, Down
           Left, Right
                       Change to the pane above, below, to the left, or to the right of the current pane.
           M-1 to M-5  Arrange panes in one of the five preset layouts: even-horizontal, even-vertical, main-horizontal, main-vertical, or tiled.
           Space       Arrange the current window in the next preset layout.
           M-n         Move to the next window with a bell or activity marker.
           M-o         Rotate the panes in the current window backwards.
           M-p         Move to the previous window with a bell or activity marker.
           C-Up, C-Down
           C-Left, C-Right
                       Resize the current pane in steps of one cell.
           M-Up, M-Down
           M-Left, M-Right
                       Resize the current pane in steps of five cells.

     Key bindings may be changed with the [1mbind-key [22mand [1munbind-key [22mcommands.

[1mCOMMAND PARSING AND EXECUTION[0m
     [1mtmux [22msupports a large number of commands which can be used to control its behaviour.  Each command is named and can accept zero or more flags
     and arguments.  They may be bound to a key with the [1mbind-key [22mcommand or run from the shell prompt, a shell script, a configuration file or the
     command prompt.  For example, the same [1mset-option [22mcommand run from the shell prompt, from [4m~/.tmux.conf[24m and bound to a key may look like:

           $ tmux set-option -g status-style bg=cyan

           set-option -g status-style bg=cyan

           bind-key C set-option -g status-style bg=cyan

     Here, the command name is ‚Äòset-option‚Äô, ‚Äò[1m-g[22m‚Äô is a flag and ‚Äòstatus-style‚Äô and ‚Äòbg=cyan‚Äô are arguments.

     [1mtmux [22mdistinguishes between command parsing and execution.  In order to execute a command, [1mtmux [22mneeds it to be split up into its name and argu‚Äê
     ments.  This is command parsing.  If a command is run from the shell, the shell parses it; from inside [1mtmux [22mor from a configuration file, [1mtmux[0m
     does.  Examples of when [1mtmux [22mparses commands are:

           [1m-   [22min a configuration file;

           [1m-   [22mtyped at the command prompt (see [1mcommand-prompt[22m);

           [1m-   [22mgiven to [1mbind-key[22m;

           [1m-   [22mpassed as arguments to [1mif-shell [22mor [1mconfirm-before[22m.

     To execute commands, each client has a ‚Äòcommand queue‚Äô.  A global command queue not attached to any client is used on startup for configuration
     files like [4m~/.tmux.conf[24m.  Parsed commands added to the queue are executed in order.  Some commands, like [1mif-shell [22mand [1mconfirm-before[22m, parse
     their argument to create a new command which is inserted immediately after themselves.  This means that arguments can be parsed twice or more -
     once when the parent command (such as [1mif-shell[22m) is parsed and again when it parses and executes its command.  Commands like [1mif-shell[22m, [1mrun-shell[0m
     and [1mdisplay-panes [22mstop execution of subsequent commands on the queue until something happens - [1mif-shell [22mand [1mrun-shell [22muntil a shell command fin‚Äê
     ishes and [1mdisplay-panes [22muntil a key is pressed.  For example, the following commands:

           new-session; new-window
           if-shell "true" "split-window"
           kill-session

     Will execute [1mnew-session[22m, [1mnew-window[22m, [1mif-shell[22m, the shell command true(1), [1msplit-window [22mand [1mkill-session [22min that order.

     The [4mCOMMANDS[24m section lists the [1mtmux [22mcommands and their arguments.

[1mPARSING SYNTAX[0m
     This section describes the syntax of commands parsed by [1mtmux[22m, for example in a configuration file or at the command prompt.  Note that when com‚Äê
     mands are entered into the shell, they are parsed by the shell - see for example ksh(1) or csh(1).

     Each command is terminated by a newline or a semicolon (;).  Commands separated by semicolons together form a ‚Äòcommand sequence‚Äô - if a command
     in the sequence encounters an error, no subsequent commands are executed.

     It is recommended that a semicolon used as a command separator should be written as an individual token, for example from sh(1):

           $ tmux neww \; splitw

     Or:

           $ tmux neww ';' splitw

     Or from the tmux command prompt:

           neww ; splitw

     However, a trailing semicolon is also interpreted as a command separator, for example in these sh(1) commands:

           $ tmux neww\\; splitw

     Or:

           $ tmux 'neww;' splitw

     As in these examples, when running tmux from the shell extra care must be taken to properly quote semicolons:

           1.   Semicolons that should be interpreted as a command separator should be escaped according to the shell conventions.  For sh(1) this
                typically means quoted (such as ‚Äòneww ';' splitw‚Äô) or escaped (such as ‚Äòneww \\\\; splitw‚Äô).

           2.   Individual semicolons or trailing semicolons that should be interpreted as arguments should be escaped twice: once according to the
                shell conventions and a second time for [1mtmux[22m; for example:

                      $ tmux neww 'foo\\;' bar
                      $ tmux neww foo\\\\; bar

           3.   Semicolons that are not individual tokens or trailing another token should only be escaped once according to shell conventions; for
                example:

                      $ tmux neww 'foo-;-bar'
                      $ tmux neww foo-\\;-bar

     Comments are marked by the unquoted # character - any remaining text after a comment is ignored until the end of the line.

     If the last character of a line is \, the line is joined with the following line (the \ and the newline are completely removed).  This is called
     line continuation and applies both inside and outside quoted strings and in comments, but not inside braces.

     Command arguments may be specified as strings surrounded by single (') quotes, double quotes (") or braces ({}).  This is required when the ar‚Äê
     gument contains any special character.  Single and double quoted strings cannot span multiple lines except with line continuation.  Braces can
     span multiple lines.

     Outside of quotes and inside double quotes, these replacements are performed:

           [1m-   [22mEnvironment variables preceded by $ are replaced with their value from the global environment (see the [4mGLOBAL[24m [4mAND[24m [4mSESSION[24m [4mENVIRONMENT[0m
               section).

           [1m-   [22mA leading ~ or ~user is expanded to the home directory of the current or specified user.

           [1m-   [22m\uXXXX or \uXXXXXXXX is replaced by the Unicode codepoint corresponding to the given four or eight digit hexadecimal number.

           [1m-   [22mWhen preceded (escaped) by a \, the following characters are replaced: \e by the escape character; \r by a carriage return; \n by a
               newline; and \t by a tab.

           [1m-   [22m\ooo is replaced by a character of the octal value ooo.  Three octal digits are required, for example \001.  The largest valid charac‚Äê
               ter is \377.

           [1m-   [22mAny other characters preceded by \ are replaced by themselves (that is, the \ is removed) and are not treated as having any special
               meaning - so for example \; will not mark a command sequence and \$ will not expand an environment variable.

     Braces are parsed as a configuration file (so conditions such as ‚Äò%if‚Äô are processed) and then converted into a string.  They are designed to
     avoid the need for additional escaping when passing a group of [1mtmux [22mcommands as an argument (for example to [1mif-shell[22m).  These two examples pro‚Äê
     duce an identical command - note that no escaping is needed when using {}:

           if-shell true {
               display -p 'brace-dollar-foo: }$foo'
           }

           if-shell true "display -p 'brace-dollar-foo: }\$foo'"

     Braces may be enclosed inside braces, for example:

           bind x if-shell "true" {
               if-shell "true" {
                   display "true!"
               }
           }

     Environment variables may be set by using the syntax ‚Äòname=value‚Äô, for example ‚ÄòHOME=/home/user‚Äô.  Variables set during parsing are added to the
     global environment.  A hidden variable may be set with ‚Äò%hidden‚Äô, for example:

           %hidden MYVAR=42

     Hidden variables are not passed to the environment of processes created by tmux.  See the [4mGLOBAL[24m [4mAND[24m [4mSESSION[24m [4mENVIRONMENT[24m section.

     Commands may be parsed conditionally by surrounding them with ‚Äò%if‚Äô, ‚Äò%elif‚Äô, ‚Äò%else‚Äô and ‚Äò%endif‚Äô.  The argument to ‚Äò%if‚Äô and ‚Äò%elif‚Äô is ex‚Äê
     panded as a format (see [4mFORMATS[24m) and if it evaluates to false (zero or empty), subsequent text is ignored until the closing ‚Äò%elif‚Äô, ‚Äò%else‚Äô or
     ‚Äò%endif‚Äô.  For example:

           %if "#{==:#{host},myhost}"
           set -g status-style bg=red
           %elif "#{==:#{host},myotherhost}"
           set -g status-style bg=green
           %else
           set -g status-style bg=blue
           %endif

     Will change the status line to red if running on ‚Äòmyhost‚Äô, green if running on ‚Äòmyotherhost‚Äô, or blue if running on another host.  Conditionals
     may be given on one line, for example:

           %if #{==:#{host},myhost} set -g status-style bg=red %endif

[1mCOMMANDS[0m
     This section describes the commands supported by [1mtmux[22m.  Most commands accept the optional [1m-t [22m(and sometimes [1m-s[22m) argument with one of
     [4mtarget-client[24m, [4mtarget-session[24m, [4mtarget-window[24m, or [4mtarget-pane[24m.  These specify the client, session, window or pane which a command should affect.

     [4mtarget-client[24m should be the name of the client, typically the pty(4) file to which the client is connected, for example either of [4m/dev/ttyp1[24m or
     [4mttyp1[24m for the client attached to [4m/dev/ttyp1[24m.  If no client is specified, [1mtmux [22mattempts to work out the client currently in use; if that fails,
     an error is reported.  Clients may be listed with the [1mlist-clients [22mcommand.

     [4mtarget-session[24m is tried as, in order:

           1.   A session ID prefixed with a $.

           2.   An exact name of a session (as listed by the [1mlist-sessions [22mcommand).

           3.   The start of a session name, for example ‚Äòmysess‚Äô would match a session named ‚Äòmysession‚Äô.

           4.   An fnmatch(3) pattern which is matched against the session name.

     If the session name is prefixed with an ‚Äò=‚Äô, only an exact match is accepted (so ‚Äò=mysess‚Äô will only match exactly ‚Äòmysess‚Äô, not ‚Äòmysession‚Äô).

     If a single session is found, it is used as the target session; multiple matches produce an error.  If a session is omitted, the current session
     is used if available; if no current session is available, the most recently used is chosen.

     [4mtarget-window[24m (or [4msrc-window[24m or [4mdst-window[24m) specifies a window in the form [4msession[24m:[4mwindow[24m.  [4msession[24m follows the same rules as for
     [4mtarget-session[24m, and [4mwindow[24m is looked for in order as:

           1.   A special token, listed below.

           2.   A window index, for example ‚Äòmysession:1‚Äô is window 1 in session ‚Äòmysession‚Äô.

           3.   A window ID, such as @1.

           4.   An exact window name, such as ‚Äòmysession:mywindow‚Äô.

           5.   The start of a window name, such as ‚Äòmysession:mywin‚Äô.

           6.   As an fnmatch(3) pattern matched against the window name.

     Like sessions, a ‚Äò=‚Äô prefix will do an exact match only.  An empty window name specifies the next unused index if appropriate (for example the
     [1mnew-window [22mand [1mlink-window [22mcommands) otherwise the current window in [4msession[24m is chosen.

     The following special tokens are available to indicate particular windows.  Each has a single-character alternative form.

     [1mToken              Meaning[0m
     {start}       ^    The lowest-numbered window
     {end}         $    The highest-numbered window
     {last}        !    The last (previously current) window
     {next}        +    The next window by number
     {previous}    -    The previous window by number

     [4mtarget-pane[24m (or [4msrc-pane[24m or [4mdst-pane[24m) may be a pane ID or takes a similar form to [4mtarget-window[24m but with the optional addition of a period fol‚Äê
     lowed by a pane index or pane ID, for example: ‚Äòmysession:mywindow.1‚Äô.  If the pane index is omitted, the currently active pane in the specified
     window is used.  The following special tokens are available for the pane index:

     [1mToken                  Meaning[0m
     {last}            !    The last (previously active) pane
     {next}            +    The next pane by number
     {previous}        -    The previous pane by number
     {top}                  The top pane
     {bottom}               The bottom pane
     {left}                 The leftmost pane
     {right}                The rightmost pane
     {top-left}             The top-left pane
     {top-right}            The top-right pane
     {bottom-left}          The bottom-left pane
     {bottom-right}         The bottom-right pane
     {up-of}                The pane above the active pane
     {down-of}              The pane below the active pane
     {left-of}              The pane to the left of the active pane
     {right-of}             The pane to the right of the active pane

     The tokens ‚Äò+‚Äô and ‚Äò-‚Äô may be followed by an offset, for example:

           select-window -t:+2

     In addition, [4mtarget-session[24m, [4mtarget-window[24m or [4mtarget-pane[24m may consist entirely of the token ‚Äò{mouse}‚Äô (alternative form ‚Äò=‚Äô) to specify the ses‚Äê
     sion, window or pane where the most recent mouse event occurred (see the [4mMOUSE[24m [4mSUPPORT[24m section) or ‚Äò{marked}‚Äô (alternative form ‚Äò~‚Äô) to specify
     the marked pane (see [1mselect-pane -m[22m).

     Sessions, window and panes are each numbered with a unique ID; session IDs are prefixed with a ‚Äò$‚Äô, windows with a ‚Äò@‚Äô, and panes with a ‚Äò%‚Äô.
     These are unique and are unchanged for the life of the session, window or pane in the [1mtmux [22mserver.  The pane ID is passed to the child process
     of the pane in the TMUX_PANE environment variable.  IDs may be displayed using the ‚Äòsession_id‚Äô, ‚Äòwindow_id‚Äô, or ‚Äòpane_id‚Äô formats (see the
     [4mFORMATS[24m section) and the [1mdisplay-message[22m, [1mlist-sessions[22m, [1mlist-windows [22mor [1mlist-panes [22mcommands.

     [4mshell-command[24m arguments are sh(1) commands.  This may be a single argument passed to the shell, for example:

           new-window 'vi ~/.tmux.conf'

     Will run:

           /bin/sh -c 'vi ~/.tmux.conf'

     Additionally, the [1mnew-window[22m, [1mnew-session[22m, [1msplit-window[22m, [1mrespawn-window [22mand [1mrespawn-pane [22mcommands allow [4mshell-command[24m to be given as multiple
     arguments and executed directly (without ‚Äòsh -c‚Äô).  This can avoid issues with shell quoting.  For example:

           $ tmux new-window vi ~/.tmux.conf

     Will run vi(1) directly without invoking the shell.

     [4mcommand[24m [[4marguments[24m] refers to a [1mtmux [22mcommand, either passed with the command and arguments separately, for example:

           bind-key F1 set-option status off

     Or passed as a single string argument in [4m.tmux.conf[24m, for example:

           bind-key F1 { set-option status off }

     Example [1mtmux [22mcommands include:

           refresh-client -t/dev/ttyp2

           rename-session -tfirst newname

           set-option -wt:0 monitor-activity on

           new-window ; split-window -d

           bind-key R source-file ~/.tmux.conf \; \
                   display-message "source-file done"

     Or from sh(1):

           $ tmux kill-window -t :1

           $ tmux new-window \; split-window -d

           $ tmux new-session -d 'vi ~/.tmux.conf' \; split-window -d \; attach

[1mCLIENTS AND SESSIONS[0m
     The [1mtmux [22mserver manages clients, sessions, windows and panes.  Clients are attached to sessions to interact with them, either when they are cre‚Äê
     ated with the [1mnew-session [22mcommand, or later with the [1mattach-session [22mcommand.  Each session has one or more windows [4mlinked[24m into it.  Windows may
     be linked to multiple sessions and are made up of one or more panes, each of which contains a pseudo terminal.  Commands for creating, linking
     and otherwise manipulating windows are covered in the [4mWINDOWS[24m [4mAND[24m [4mPANES[24m section.

     The following commands are available to manage clients and sessions:

     [1mattach-session [22m[[1m-dErx[22m] [[1m-c [4m[22mworking-directory[24m] [[1m-f [4m[22mflags[24m] [[1m-t [4m[22mtarget-session[24m]
                   (alias: [1mattach[22m)
             If run from outside [1mtmux[22m, create a new client in the current terminal and attach it to [4mtarget-session[24m.  If used from inside, switch the
             current client.  If [1m-d [22mis specified, any other clients attached to the session are detached.  If [1m-x [22mis given, send SIGHUP to the parent
             process of the client as well as detaching the client, typically causing it to exit.  [1m-f [22msets a comma-separated list of client flags.
             The flags are:

             active-pane
                     the client has an independent active pane

             ignore-size
                     the client does not affect the size of other clients

             no-output
                     the client does not receive pane output in control mode

             pause-after=seconds
                     output is paused once the pane is [4mseconds[24m behind in control mode

             read-only
                     the client is read-only

             wait-exit
                     wait for an empty line input before exiting in control mode

             A leading ‚Äò!‚Äô turns a flag off if the client is already attached.  [1m-r [22mis an alias for [1m-f [4m[22mread-only,ignore-size[24m.  When a client is read-
             only, only keys bound to the [1mdetach-client [22mor [1mswitch-client [22mcommands have any effect.  A client with the [4mactive-pane[24m flag allows the ac‚Äê
             tive pane to be selected independently of the window's active pane used by clients without the flag.  This only affects the cursor posi‚Äê
             tion and commands issued from the client; other features such as hooks and styles continue to use the window's active pane.

             If no server is started, [1mattach-session [22mwill attempt to start it; this will fail unless sessions are created in the configuration file.

             The [4mtarget-session[24m rules for [1mattach-session [22mare slightly adjusted: if [1mtmux [22mneeds to select the most recently used session, it will pre‚Äê
             fer the most recently used [4munattached[24m session.

             [1m-c [22mwill set the session working directory (used for new windows) to [4mworking-directory[24m.

             If [1m-E [22mis used, the [1mupdate-environment [22moption will not be applied.

     [1mdetach-client [22m[[1m-aP[22m] [[1m-E [4m[22mshell-command[24m] [[1m-s [4m[22mtarget-session[24m] [[1m-t [4m[22mtarget-client[24m]
                   (alias: [1mdetach[22m)
             Detach the current client if bound to a key, the client specified with [1m-t[22m, or all clients currently attached to the session specified by
             [1m-s[22m.  The [1m-a [22moption kills all but the client given with [1m-t[22m.  If [1m-P [22mis given, send SIGHUP to the parent process of the client, typically
             causing it to exit.  With [1m-E[22m, run [4mshell-command[24m to replace the client.

     [1mhas-session [22m[[1m-t [4m[22mtarget-session[24m]
                   (alias: [1mhas[22m)
             Report an error and exit with 1 if the specified session does not exist.  If it does exist, exit with 0.

     [1mkill-server[0m
             Kill the [1mtmux [22mserver and clients and destroy all sessions.

     [1mkill-session [22m[[1m-aC[22m] [[1m-t [4m[22mtarget-session[24m]
             Destroy the given session, closing any windows linked to it and no other sessions, and detaching all clients attached to it.  If [1m-a [22mis
             given, all sessions but the specified one is killed.  The [1m-C [22mflag clears alerts (bell, activity, or silence) in all windows linked to
             the session.

     [1mlist-clients [22m[[1m-F [4m[22mformat[24m] [[1m-t [4m[22mtarget-session[24m]
                   (alias: [1mlsc[22m)
             List all clients attached to the server.  For the meaning of the [1m-F [22mflag, see the [4mFORMATS[24m section.  If [4mtarget-session[24m is specified, list
             only clients connected to that session.

     [1mlist-commands [22m[[1m-F [4m[22mformat[24m] [[4mcommand[24m]
                   (alias: [1mlscm[22m)
             List the syntax of [4mcommand[24m or - if omitted - of all commands supported by [1mtmux[22m.

     [1mlist-sessions [22m[[1m-F [4m[22mformat[24m] [[1m-f [4m[22mfilter[24m]
                   (alias: [1mls[22m)
             List all sessions managed by the server.  [1m-F [22mspecifies the format of each line and [1m-f [22ma filter.  Only sessions for which the filter is
             true are shown.  See the [4mFORMATS[24m section.

     [1mlock-client [22m[[1m-t [4m[22mtarget-client[24m]
                   (alias: [1mlockc[22m)
             Lock [4mtarget-client[24m, see the [1mlock-server [22mcommand.

     [1mlock-session [22m[[1m-t [4m[22mtarget-session[24m]
                   (alias: [1mlocks[22m)
             Lock all clients attached to [4mtarget-session[24m.

     [1mnew-session [22m[[1m-AdDEPX[22m] [[1m-c [4m[22mstart-directory[24m] [[1m-e [4m[22menvironment[24m] [[1m-f [4m[22mflags[24m] [[1m-F [4m[22mformat[24m] [[1m-n [4m[22mwindow-name[24m] [[1m-s [4m[22msession-name[24m] [[1m-t [4m[22mgroup-name[24m] [[1m-x [4m[22mwidth[24m]
             [[1m-y [4m[22mheight[24m] [[4mshell-command[24m]
                   (alias: [1mnew[22m)
             Create a new session with name [4msession-name[24m.

             The new session is attached to the current terminal unless [1m-d [22mis given.  [4mwindow-name[24m and [4mshell-command[24m are the name of and shell command
             to execute in the initial window.  With [1m-d[22m, the initial size comes from the global [1mdefault-size [22moption; [1m-x [22mand [1m-y [22mcan be used to specify
             a different size.  ‚Äò-‚Äô uses the size of the current client if any.  If [1m-x [22mor [1m-y [22mis given, the [1mdefault-size [22moption is set for the ses‚Äê
             sion.  [1m-f [22msets a comma-separated list of client flags (see [1mattach-session[22m).

             If run from a terminal, any termios(4) special characters are saved and used for new windows in the new session.

             The [1m-A [22mflag makes [1mnew-session [22mbehave like [1mattach-session [22mif [4msession-name[24m already exists; in this case, [1m-D [22mbehaves like [1m-d [22mto
             [1mattach-session[22m, and [1m-X [22mbehaves like [1m-x [22mto [1mattach-session[22m.

             If [1m-t [22mis given, it specifies a [1msession group[22m.  Sessions in the same group share the same set of windows - new windows are linked to all
             sessions in the group and any windows closed removed from all sessions.  The current and previous window and any session options remain
             independent and any session in a group may be killed without affecting the others.  The [4mgroup-name[24m argument may be:

             1.      the name of an existing group, in which case the new session is added to that group;

             2.      the name of an existing session - the new session is added to the same group as that session, creating a new group if necessary;

             3.      the name for a new group containing only the new session.

             [1m-n [22mand [4mshell-command[24m are invalid if [1m-t [22mis used.

             The [1m-P [22moption prints information about the new session after it has been created.  By default, it uses the format ‚Äò#{session_name}:‚Äô but
             a different format may be specified with [1m-F[22m.

             If [1m-E [22mis used, the [1mupdate-environment [22moption will not be applied.  [1m-e [22mtakes the form ‚ÄòVARIABLE=value‚Äô and sets an environment variable
             for the newly created session; it may be specified multiple times.

     [1mrefresh-client [22m[[1m-cDLRSU[22m] [[1m-A [4m[22mpane:state[24m] [[1m-B [4m[22mname:what:format[24m] [[1m-C [4m[22msize[24m] [[1m-f [4m[22mflags[24m] [[1m-l [22m[[4mtarget-pane[24m]] [[1m-t [4m[22mtarget-client[24m] [[4madjustment[24m]
                   (alias: [1mrefresh[22m)
             Refresh the current client if bound to a key, or a single client if one is given with [1m-t[22m.  If [1m-S [22mis specified, only update the client's
             status line.

             The [1m-U[22m, [1m-D[22m, [1m-L -R[22m, and [1m-c [22mflags allow the visible portion of a window which is larger than the client to be changed.  [1m-U [22mmoves the visi‚Äê
             ble part up by [4madjustment[24m rows and [1m-D [22mdown, [1m-L [22mleft by [4madjustment[24m columns and [1m-R [22mright.  [1m-c [22mreturns to tracking the cursor automati‚Äê
             cally.  If [4madjustment[24m is omitted, 1 is used.  Note that the visible position is a property of the client not of the window, changing the
             current window in the attached session will reset it.

             [1m-C [22msets the width and height of a control mode client or of a window for a control mode client, [4msize[24m must be one of ‚Äòwidthxheight‚Äô or
             ‚Äòwindow ID:widthxheight‚Äô, for example ‚Äò80x24‚Äô or ‚Äò@0:80x24‚Äô.  [1m-A [22mallows a control mode client to trigger actions on a pane.  The argu‚Äê
             ment is a pane ID (with leading ‚Äò%‚Äô), a colon, then one of ‚Äòon‚Äô, ‚Äòoff‚Äô, ‚Äòcontinue‚Äô or ‚Äòpause‚Äô.  If ‚Äòoff‚Äô, [1mtmux [22mwill not send output from
             the pane to the client and if all clients have turned the pane off, will stop reading from the pane.  If ‚Äòcontinue‚Äô, [1mtmux [22mwill return to
             sending output to the pane if it was paused (manually or with the [4mpause-after[24m flag).  If ‚Äòpause‚Äô, [1mtmux [22mwill pause the pane.  [1m-A [22mmay be
             given multiple times for different panes.

             [1m-B [22msets a subscription to a format for a control mode client.  The argument is split into three items by colons: [4mname[24m is a name for the
             subscription; [4mwhat[24m is a type of item to subscribe to; [4mformat[24m is the format.  After a subscription is added, changes to the format are
             reported with the [1m%subscription-changed [22mnotification, at most once a second.  If only the name is given, the subscription is removed.
             [4mwhat[24m may be empty to check the format only for the attached session, or one of: a pane ID such as ‚Äò%0‚Äô; ‚Äò%*‚Äô for all panes in the at‚Äê
             tached session; a window ID such as ‚Äò@0‚Äô; or ‚Äò@*‚Äô for all windows in the attached session.

             [1m-f [22msets a comma-separated list of client flags, see [1mattach-session[22m.

             [1m-l [22mrequests the clipboard from the client using the xterm(1) escape sequence.  If Ar target-pane is given, the clipboard is sent (in en‚Äê
             coded form), otherwise it is stored in a new paste buffer.

             [1m-L[22m, [1m-R[22m, [1m-U [22mand [1m-D [22mmove the visible portion of the window left, right, up or down by [4madjustment[24m, if the window is larger than the client.
             [1m-c [22mresets so that the position follows the cursor.  See the [1mwindow-size [22moption.

     [1mrename-session [22m[[1m-t [4m[22mtarget-session[24m] [4mnew-name[0m
                   (alias: [1mrename[22m)
             Rename the session to [4mnew-name[24m.

     [1mserver-access [22m[[1m-adlrw[22m] [[4muser[24m]
             Change the access or read/write permission of [4muser[24m.  The user running the [1mtmux [22mserver (its owner) and the root user cannot be changed
             and are always permitted access.

             [1m-a [22mand [1m-d [22mare used to give or revoke access for the specified user.  If the user is already attached, the [1m-d [22mflag causes their clients
             to be detached.

             [1m-r [22mand [1m-w [22mchange the permissions for [4muser[24m: [1m-r [22mmakes their clients read-only and [1m-w [22mwritable.  [1m-l [22mlists current access permissions.

             By default, the access list is empty and [1mtmux [22mcreates sockets with file system permissions preventing access by any user other than the
             owner (and root).  These permissions must be changed manually.  Great care should be taken not to allow access to untrusted users even
             read-only.

     [1mshow-messages [22m[[1m-JT[22m] [[1m-t [4m[22mtarget-client[24m]
                   (alias: [1mshowmsgs[22m)
             Show server messages or information.  Messages are stored, up to a maximum of the limit set by the [4mmessage-limit[24m server option.  [1m-J [22mand
             [1m-T [22mshow debugging information about jobs and terminals.

     [1msource-file [22m[[1m-Fnqv[22m] [4mpath[24m [4m...[0m
                   (alias: [1msource[22m)
             Execute commands from one or more files specified by [4mpath[24m (which may be glob(7) patterns).  If [1m-F [22mis present, then [4mpath[24m is expanded as a
             format.  If [1m-q [22mis given, no error will be returned if [4mpath[24m does not exist.  With [1m-n[22m, the file is parsed but no commands are executed.
             [1m-v [22mshows the parsed commands and line numbers if possible.

     [1mstart-server[0m
                   (alias: [1mstart[22m)
             Start the [1mtmux [22mserver, if not already running, without creating any sessions.

             Note that as by default the [1mtmux [22mserver will exit with no sessions, this is only useful if a session is created in [4m~/.tmux.conf[24m,
             [1mexit-empty [22mis turned off, or another command is run as part of the same command sequence.  For example:

                   $ tmux start \; show -g

     [1msuspend-client [22m[[1m-t [4m[22mtarget-client[24m]
                   (alias: [1msuspendc[22m)
             Suspend a client by sending SIGTSTP (tty stop).

     [1mswitch-client [22m[[1m-ElnprZ[22m] [[1m-c [4m[22mtarget-client[24m] [[1m-t [4m[22mtarget-session[24m] [[1m-T [4m[22mkey-table[24m]
                   (alias: [1mswitchc[22m)
             Switch the current session for client [4mtarget-client[24m to [4mtarget-session[24m.  As a special case, [1m-t [22mmay refer to a pane (a target that con‚Äê
             tains ‚Äò:‚Äô, ‚Äò.‚Äô or ‚Äò%‚Äô), to change session, window and pane.  In that case, [1m-Z [22mkeeps the window zoomed if it was zoomed.  If [1m-l[22m, [1m-n [22mor [1m-p[0m
             is used, the client is moved to the last, next or previous session respectively.  [1m-r [22mtoggles the client [1mread-only [22mand [1mignore-size [22mflags
             (see the [1mattach-session [22mcommand).

             If [1m-E [22mis used, [1mupdate-environment [22moption will not be applied.

             [1m-T [22msets the client's key table; the next key from the client will be interpreted from [4mkey-table[24m.  This may be used to configure multiple
             prefix keys, or to bind commands to sequences of keys.  For example, to make typing ‚Äòabc‚Äô run the [1mlist-keys [22mcommand:

                   bind-key -Ttable2 c list-keys
                   bind-key -Ttable1 b switch-client -Ttable2
                   bind-key -Troot   a switch-client -Ttable1

[1mWINDOWS AND PANES[0m
     Each window displayed by [1mtmux [22mmay be split into one or more [4mpanes[24m; each pane takes up a certain area of the display and is a separate terminal.
     A window may be split into panes using the [1msplit-window [22mcommand.  Windows may be split horizontally (with the [1m-h [22mflag) or vertically.  Panes may
     be resized with the [1mresize-pane [22mcommand (bound to ‚ÄòC-Up‚Äô, ‚ÄòC-Down‚Äô ‚ÄòC-Left‚Äô and ‚ÄòC-Right‚Äô by default), the current pane may be changed with the
     [1mselect-pane [22mcommand and the [1mrotate-window [22mand [1mswap-pane [22mcommands may be used to swap panes without changing their position.  Panes are numbered
     beginning from zero in the order they are created.

     By default, a [1mtmux [22mpane permits direct access to the terminal contained in the pane.  A pane may also be put into one of several modes:

           [1m-   [22mCopy mode, which permits a section of a window or its history to be copied to a [4mpaste[24m [4mbuffer[24m for later insertion into another window.
               This mode is entered with the [1mcopy-mode [22mcommand, bound to ‚Äò[‚Äô by default.  Copied text can be pasted with the [1mpaste-buffer [22mcommand,
               bound to ‚Äò]‚Äô.

           [1m-   [22mView mode, which is like copy mode but is entered when a command that produces output, such as [1mlist-keys[22m, is executed from a key bind‚Äê
               ing.

           [1m-   [22mChoose mode, which allows an item to be chosen from a list.  This may be a client, a session or window or pane, or a buffer.  This
               mode is entered with the [1mchoose-buffer[22m, [1mchoose-client [22mand [1mchoose-tree [22mcommands.

     In copy mode an indicator is displayed in the top-right corner of the pane with the current position and the number of lines in the history.

     Commands are sent to copy mode using the [1m-X [22mflag to the [1msend-keys [22mcommand.  When a key is pressed, copy mode automatically uses one of two key
     tables, depending on the [1mmode-keys [22moption: [1mcopy-mode [22mfor emacs, or [1mcopy-mode-vi [22mfor vi.  Key tables may be viewed with the [1mlist-keys [22mcommand.

     The following commands are supported in copy mode:

           [1mCommand                                      vi              emacs[0m
           append-selection
           append-selection-and-cancel                  A
           back-to-indentation                          ^               M-m
           begin-selection                              Space           C-Space
           bottom-line                                  L
           cancel                                       q               Escape
           clear-selection                              Escape          C-g
           copy-end-of-line [<prefix>]
           copy-end-of-line-and-cancel [<prefix>]
           copy-pipe-end-of-line [<command>] [<prefix>]
           copy-pipe-end-of-line-and-cancel [<command>] [<prefix>]      D        C-k
           copy-line [<prefix>]
           copy-line-and-cancel [<prefix>]
           copy-pipe-line [<command>] [<prefix>]
           copy-pipe-line-and-cancel [<command>] [<prefix>]
           copy-pipe [<command>] [<prefix>]
           copy-pipe-no-clear [<command>] [<prefix>]
           copy-pipe-and-cancel [<command>] [<prefix>]
           copy-selection [<prefix>]
           copy-selection-no-clear [<prefix>]
           copy-selection-and-cancel [<prefix>]         Enter           M-w
           cursor-down                                  j               Down
           cursor-down-and-cancel
           cursor-left                                  h               Left
           cursor-right                                 l               Right
           cursor-up                                    k               Up
           end-of-line                                  $               C-e
           goto-line <line>                             :               g
           halfpage-down                                C-d             M-Down
           halfpage-down-and-cancel
           halfpage-up                                  C-u             M-Up
           history-bottom                               G               M->
           history-top                                  g               M-<
           jump-again                                   ;               ;
           jump-backward <to>                           F               F
           jump-forward <to>                            f               f
           jump-reverse                                 ,               ,
           jump-to-backward <to>                        T
           jump-to-forward <to>                         t
           jump-to-mark                                 M-x             M-x
           middle-line                                  M               M-r
           next-matching-bracket                        %               M-C-f
           next-paragraph                               }               M-}
           next-space                                   W
           next-space-end                               E
           next-word                                    w
           next-word-end                                e               M-f
           other-end                                    o
           page-down                                    C-f             PageDown
           page-down-and-cancel
           page-up                                      C-b             PageUp
           pipe [<command>] [<prefix>]
           pipe-no-clear [<command>] [<prefix>]
           pipe-and-cancel [<command>] [<prefix>]
           previous-matching-bracket                                    M-C-b
           previous-paragraph                           {               M-{
           previous-space                               B
           previous-word                                b               M-b
           rectangle-on
           rectangle-off
           rectangle-toggle                             v               R
           refresh-from-pane                            r               r
           scroll-down                                  C-e             C-Down
           scroll-down-and-cancel
           scroll-up                                    C-y             C-Up
           search-again                                 n               n
           search-backward <for>                        ?
           search-backward-incremental <for>                            C-r
           search-backward-text <for>
           search-forward <for>                         /
           search-forward-incremental <for>                             C-s
           search-forward-text <for>
           search-reverse                               N               N
           select-line                                  V
           select-word
           set-mark                                     X               X
           start-of-line                                0               C-a
           stop-selection
           toggle-position                              P               P
           top-line                                     H               M-R

     The search commands come in several varieties: ‚Äòsearch-forward‚Äô and ‚Äòsearch-backward‚Äô search for a regular expression; the ‚Äò-text‚Äô variants
     search for a plain text string rather than a regular expression; ‚Äò-incremental‚Äô perform an incremental search and expect to be used with the [1m-i[0m
     flag to the [1mcommand-prompt [22mcommand.  ‚Äòsearch-again‚Äô repeats the last search and ‚Äòsearch-reverse‚Äô does the same but reverses the direction (for‚Äê
     ward becomes backward and backward becomes forward).

     Copy commands may take an optional buffer prefix argument which is used to generate the buffer name (the default is ‚Äòbuffer‚Äô so buffers are
     named ‚Äòbuffer0‚Äô, ‚Äòbuffer1‚Äô and so on).  Pipe commands take a command argument which is the command to which the selected text is piped.
     ‚Äòcopy-pipe‚Äô variants also copy the selection.  The ‚Äò-and-cancel‚Äô variants of some commands exit copy mode after they have completed (for copy
     commands) or when the cursor reaches the bottom (for scrolling commands).  ‚Äò-no-clear‚Äô variants do not clear the selection.

     The next and previous word keys skip over whitespace and treat consecutive runs of either word separators or other letters as words.  Word sepa‚Äê
     rators can be customized with the [4mword-separators[24m session option.  Next word moves to the start of the next word, next word end to the end of
     the next word and previous word to the start of the previous word.  The three next and previous space keys work similarly but use a space alone
     as the word separator.  Setting [4mword-separators[24m to the empty string makes next/previous word equivalent to next/previous space.

     The jump commands enable quick movement within a line.  For instance, typing ‚Äòf‚Äô followed by ‚Äò/‚Äô will move the cursor to the next ‚Äò/‚Äô character
     on the current line.  A ‚Äò;‚Äô will then jump to the next occurrence.

     Commands in copy mode may be prefaced by an optional repeat count.  With vi key bindings, a prefix is entered using the number keys; with emacs,
     the Alt (meta) key and a number begins prefix entry.

     The synopsis for the [1mcopy-mode [22mcommand is:

     [1mcopy-mode [22m[[1m-eHMqu[22m] [[1m-s [4m[22msrc-pane[24m] [[1m-t [4m[22mtarget-pane[24m]
             Enter copy mode.  The [1m-u [22moption scrolls one page up.  [1m-M [22mbegins a mouse drag (only valid if bound to a mouse key binding, see [4mMOUSE[0m
             [4mSUPPORT[24m).  [1m-H [22mhides the position indicator in the top right.  [1m-q [22mcancels copy mode and any other modes.  [1m-s [22mcopies from [4msrc-pane[24m instead
             of [4mtarget-pane[24m.

             [1m-e [22mspecifies that scrolling to the bottom of the history (to the visible screen) should exit copy mode.  While in copy mode, pressing a
             key other than those used for scrolling will disable this behaviour.  This is intended to allow fast scrolling through a pane's history,
             for example with:

                   bind PageUp copy-mode -eu

     A number of preset arrangements of panes are available, these are called layouts.  These may be selected with the [1mselect-layout [22mcommand or cy‚Äê
     cled with [1mnext-layout [22m(bound to ‚ÄòSpace‚Äô by default); once a layout is chosen, panes within it may be moved and resized as normal.

     The following layouts are supported:

     [1meven-horizontal[0m
             Panes are spread out evenly from left to right across the window.

     [1meven-vertical[0m
             Panes are spread evenly from top to bottom.

     [1mmain-horizontal[0m
             A large (main) pane is shown at the top of the window and the remaining panes are spread from left to right in the leftover space at the
             bottom.  Use the [4mmain-pane-height[24m window option to specify the height of the top pane.

     [1mmain-vertical[0m
             Similar to [1mmain-horizontal [22mbut the large pane is placed on the left and the others spread from top to bottom along the right.  See the
             [4mmain-pane-width[24m window option.

     [1mtiled   [22mPanes are spread out as evenly as possible over the window in both rows and columns.

     In addition, [1mselect-layout [22mmay be used to apply a previously used layout - the [1mlist-windows [22mcommand displays the layout of each window in a form
     suitable for use with [1mselect-layout[22m.  For example:

           $ tmux list-windows
           0: ksh [159x48]
               layout: bb62,159x48,0,0{79x48,0,0,79x48,80,0}
           $ tmux select-layout bb62,159x48,0,0{79x48,0,0,79x48,80,0}

     [1mtmux [22mautomatically adjusts the size of the layout for the current window size.  Note that a layout cannot be applied to a window with more panes
     than that from which the layout was originally defined.

     Commands related to windows and panes are as follows:

     [1mbreak-pane [22m[[1m-abdP[22m] [[1m-F [4m[22mformat[24m] [[1m-n [4m[22mwindow-name[24m] [[1m-s [4m[22msrc-pane[24m] [[1m-t [4m[22mdst-window[24m]
                   (alias: [1mbreakp[22m)
             Break [4msrc-pane[24m off from its containing window to make it the only pane in [4mdst-window[24m.  With [1m-a [22mor [1m-b[22m, the window is moved to the next
             index after or before (existing windows are moved if necessary).  If [1m-d [22mis given, the new window does not become the current window.
             The [1m-P [22moption prints information about the new window after it has been created.  By default, it uses the format
             ‚Äò#{session_name}:#{window_index}.#{pane_index}‚Äô but a different format may be specified with [1m-F[22m.

     [1mcapture-pane [22m[[1m-aepPqCJN[22m] [[1m-b [4m[22mbuffer-name[24m] [[1m-E [4m[22mend-line[24m] [[1m-S [4m[22mstart-line[24m] [[1m-t [4m[22mtarget-pane[24m]
                   (alias: [1mcapturep[22m)
             Capture the contents of a pane.  If [1m-p [22mis given, the output goes to stdout, otherwise to the buffer specified with [1m-b [22mor a new buffer if
             omitted.  If [1m-a [22mis given, the alternate screen is used, and the history is not accessible.  If no alternate screen exists, an error will
             be returned unless [1m-q [22mis given.  If [1m-e [22mis given, the output includes escape sequences for text and background attributes.  [1m-C [22malso es‚Äê
             capes non-printable characters as octal \xxx.  [1m-N [22mpreserves trailing spaces at each line's end and [1m-J [22mpreserves trailing spaces and
             joins any wrapped lines.  [1m-P [22mcaptures only any output that the pane has received that is the beginning of an as-yet incomplete escape
             sequence.

             [1m-S [22mand [1m-E [22mspecify the starting and ending line numbers, zero is the first line of the visible pane and negative numbers are lines in the
             history.  ‚Äò-‚Äô to [1m-S [22mis the start of the history and to [1m-E [22mthe end of the visible pane.  The default is to capture only the visible con‚Äê
             tents of the pane.

     [1mchoose-client [22m[[1m-NrZ[22m] [[1m-F [4m[22mformat[24m] [[1m-f [4m[22mfilter[24m] [[1m-K [4m[22mkey-format[24m] [[1m-O [4m[22msort-order[24m] [[1m-t [4m[22mtarget-pane[24m] [[4mtemplate[24m]
             Put a pane into client mode, allowing a client to be selected interactively from a list.  Each client is shown on one line.  A shortcut
             key is shown on the left in brackets allowing for immediate choice, or the list may be navigated and an item chosen or otherwise manipu‚Äê
             lated using the keys below.  [1m-Z [22mzooms the pane.  The following keys may be used in client mode:

                   [1mKey    Function[0m
                   Enter  Choose selected client
                   Up     Select previous client
                   Down   Select next client
                   C-s    Search by name
                   n      Repeat last search
                   t      Toggle if client is tagged
                   T      Tag no clients
                   C-t    Tag all clients
                   d      Detach selected client
                   D      Detach tagged clients
                   x      Detach and HUP selected client
                   X      Detach and HUP tagged clients
                   z      Suspend selected client
                   Z      Suspend tagged clients
                   f      Enter a format to filter items
                   O      Change sort field
                   r      Reverse sort order
                   v      Toggle preview
                   q      Exit mode

             After a client is chosen, ‚Äò%%‚Äô is replaced by the client name in [4mtemplate[24m and the result executed as a command.  If [4mtemplate[24m is not
             given, "detach-client -t '%%'" is used.

             [1m-O [22mspecifies the initial sort field: one of ‚Äòname‚Äô, ‚Äòsize‚Äô, ‚Äòcreation‚Äô, or ‚Äòactivity‚Äô.  [1m-r [22mreverses the sort order.  [1m-f [22mspecifies an
             initial filter: the filter is a format - if it evaluates to zero, the item in the list is not shown, otherwise it is shown.  If a filter
             would lead to an empty list, it is ignored.  [1m-F [22mspecifies the format for each item in the list and [1m-K [22ma format for each shortcut key;
             both are evaluated once for each line.  [1m-N [22mstarts without the preview.  This command works only if at least one client is attached.

     [1mchoose-tree [22m[[1m-GNrswZ[22m] [[1m-F [4m[22mformat[24m] [[1m-f [4m[22mfilter[24m] [[1m-K [4m[22mkey-format[24m] [[1m-O [4m[22msort-order[24m] [[1m-t [4m[22mtarget-pane[24m] [[4mtemplate[24m]
             Put a pane into tree mode, where a session, window or pane may be chosen interactively from a tree.  Each session, window or pane is
             shown on one line.  A shortcut key is shown on the left in brackets allowing for immediate choice, or the tree may be navigated and an
             item chosen or otherwise manipulated using the keys below.  [1m-s [22mstarts with sessions collapsed and [1m-w [22mwith windows collapsed.  [1m-Z [22mzooms
             the pane.  The following keys may be used in tree mode:

                   [1mKey    Function[0m
                   Enter  Choose selected item
                   Up     Select previous item
                   Down   Select next item
                   +      Expand selected item
                   -      Collapse selected item
                   M-+    Expand all items
                   M--    Collapse all items
                   x      Kill selected item
                   X      Kill tagged items
                   <      Scroll list of previews left
                   >      Scroll list of previews right
                   C-s    Search by name
                   m      Set the marked pane
                   M      Clear the marked pane
                   n      Repeat last search
                   t      Toggle if item is tagged
                   T      Tag no items
                   C-t    Tag all items
                   :      Run a command for each tagged item
                   f      Enter a format to filter items
                   H      Jump to the starting pane
                   O      Change sort field
                   r      Reverse sort order
                   v      Toggle preview
                   q      Exit mode

             After a session, window or pane is chosen, the first instance of ‚Äò%%‚Äô and all instances of ‚Äò%1‚Äô are replaced by the target in [4mtemplate[0m
             and the result executed as a command.  If [4mtemplate[24m is not given, "switch-client -t '%%'" is used.

             [1m-O [22mspecifies the initial sort field: one of ‚Äòindex‚Äô, ‚Äòname‚Äô, or ‚Äòtime‚Äô.  [1m-r [22mreverses the sort order.  [1m-f [22mspecifies an initial filter:
             the filter is a format - if it evaluates to zero, the item in the list is not shown, otherwise it is shown.  If a filter would lead to
             an empty list, it is ignored.  [1m-F [22mspecifies the format for each item in the tree and [1m-K [22ma format for each shortcut key; both are evalu‚Äê
             ated once for each line.  [1m-N [22mstarts without the preview.  [1m-G [22mincludes all sessions in any session groups in the tree rather than only
             the first.  This command works only if at least one client is attached.

     [1mcustomize-mode [22m[[1m-NZ[22m] [[1m-F [4m[22mformat[24m] [[1m-f [4m[22mfilter[24m] [[1m-t [4m[22mtarget-pane[24m] [[4mtemplate[24m]
             Put a pane into customize mode, where options and key bindings may be browsed and modified from a list.  Option values in the list are
             shown for the active pane in the current window.  [1m-Z [22mzooms the pane.  The following keys may be used in customize mode:

                   [1mKey    Function[0m
                   Enter  Set pane, window, session or global option value
                   Up     Select previous item
                   Down   Select next item
                   +      Expand selected item
                   -      Collapse selected item
                   M-+    Expand all items
                   M--    Collapse all items
                   s      Set option value or key attribute
                   S      Set global option value
                   w      Set window option value, if option is for pane and window
                   d      Set an option or key to the default
                   D      Set tagged options and tagged keys to the default
                   u      Unset an option (set to default value if global) or unbind a key
                   U      Unset tagged options and unbind tagged keys
                   C-s    Search by name
                   n      Repeat last search
                   t      Toggle if item is tagged
                   T      Tag no items
                   C-t    Tag all items
                   f      Enter a format to filter items
                   v      Toggle option information
                   q      Exit mode

             [1m-f [22mspecifies an initial filter: the filter is a format - if it evaluates to zero, the item in the list is not shown, otherwise it is
             shown.  If a filter would lead to an empty list, it is ignored.  [1m-F [22mspecifies the format for each item in the tree.  [1m-N [22mstarts without
             the option information.  This command works only if at least one client is attached.

     [1mdisplay-panes [22m[[1m-bN[22m] [[1m-d [4m[22mduration[24m] [[1m-t [4m[22mtarget-client[24m] [[4mtemplate[24m]
                   (alias: [1mdisplayp[22m)
             Display a visible indicator of each pane shown by [4mtarget-client[24m.  See the [1mdisplay-panes-colour [22mand [1mdisplay-panes-active-colour [22msession
             options.  The indicator is closed when a key is pressed (unless [1m-N [22mis given) or [4mduration[24m milliseconds have passed.  If [1m-d [22mis not given,
             [1mdisplay-panes-time [22mis used.  A duration of zero means the indicator stays until a key is pressed.  While the indicator is on screen, a
             pane may be chosen with the ‚Äò0‚Äô to ‚Äò9‚Äô keys, which will cause [4mtemplate[24m to be executed as a command with ‚Äò%%‚Äô substituted by the pane ID.
             The default [4mtemplate[24m is "select-pane -t '%%'".  With [1m-b[22m, other commands are not blocked from running until the indicator is closed.

     [1mfind-window [22m[[1m-iCNrTZ[22m] [[1m-t [4m[22mtarget-pane[24m] [4mmatch-string[0m
                   (alias: [1mfindw[22m)
             Search for a fnmatch(3) pattern or, with [1m-r[22m, regular expression [4mmatch-string[24m in window names, titles, and visible content (but not his‚Äê
             tory).  The flags control matching behavior: [1m-C [22mmatches only visible window contents, [1m-N [22mmatches only the window name and [1m-T [22mmatches
             only the window title.  [1m-i [22mmakes the search ignore case.  The default is [1m-CNT[22m.  [1m-Z [22mzooms the pane.

             This command works only if at least one client is attached.

     [1mjoin-pane [22m[[1m-bdfhv[22m] [[1m-l [4m[22msize[24m] [[1m-s [4m[22msrc-pane[24m] [[1m-t [4m[22mdst-pane[24m]
                   (alias: [1mjoinp[22m)
             Like [1msplit-window[22m, but instead of splitting [4mdst-pane[24m and creating a new pane, split it and move [4msrc-pane[24m into the space.  This can be
             used to reverse [1mbreak-pane[22m.  The [1m-b [22moption causes [4msrc-pane[24m to be joined to left of or above [4mdst-pane[24m.

             If [1m-s [22mis omitted and a marked pane is present (see [1mselect-pane -m[22m), the marked pane is used rather than the current pane.

     [1mkill-pane [22m[[1m-a[22m] [[1m-t [4m[22mtarget-pane[24m]
                   (alias: [1mkillp[22m)
             Destroy the given pane.  If no panes remain in the containing window, it is also destroyed.  The [1m-a [22moption kills all but the pane given
             with [1m-t[22m.

     [1mkill-window [22m[[1m-a[22m] [[1m-t [4m[22mtarget-window[24m]
                   (alias: [1mkillw[22m)
             Kill the current window or the window at [4mtarget-window[24m, removing it from any sessions to which it is linked.  The [1m-a [22moption kills all
             but the window given with [1m-t[22m.

     [1mlast-pane [22m[[1m-deZ[22m] [[1m-t [4m[22mtarget-window[24m]
                   (alias: [1mlastp[22m)
             Select the last (previously selected) pane.  [1m-Z [22mkeeps the window zoomed if it was zoomed.  [1m-e [22menables or [1m-d [22mdisables input to the pane.

     [1mlast-window [22m[[1m-t [4m[22mtarget-session[24m]
                   (alias: [1mlast[22m)
             Select the last (previously selected) window.  If no [4mtarget-session[24m is specified, select the last window of the current session.

     [1mlink-window [22m[[1m-abdk[22m] [[1m-s [4m[22msrc-window[24m] [[1m-t [4m[22mdst-window[24m]
                   (alias: [1mlinkw[22m)
             Link the window at [4msrc-window[24m to the specified [4mdst-window[24m.  If [4mdst-window[24m is specified and no such window exists, the [4msrc-window[24m is
             linked there.  With [1m-a [22mor [1m-b [22mthe window is moved to the next index after or before [4mdst-window[24m (existing windows are moved if necessary).
             If [1m-k [22mis given and [4mdst-window[24m exists, it is killed, otherwise an error is generated.  If [1m-d [22mis given, the newly linked window is not se‚Äê
             lected.

     [1mlist-panes [22m[[1m-as[22m] [[1m-F [4m[22mformat[24m] [[1m-f [4m[22mfilter[24m] [[1m-t [4m[22mtarget[24m]
                   (alias: [1mlsp[22m)
             If [1m-a [22mis given, [4mtarget[24m is ignored and all panes on the server are listed.  If [1m-s [22mis given, [4mtarget[24m is a session (or the current session).
             If neither is given, [4mtarget[24m is a window (or the current window).  [1m-F [22mspecifies the format of each line and [1m-f [22ma filter.  Only panes for
             which the filter is true are shown.  See the [4mFORMATS[24m section.

     [1mlist-windows [22m[[1m-a[22m] [[1m-F [4m[22mformat[24m] [[1m-f [4m[22mfilter[24m] [[1m-t [4m[22mtarget-session[24m]
                   (alias: [1mlsw[22m)
             If [1m-a [22mis given, list all windows on the server.  Otherwise, list windows in the current session or in [4mtarget-session[24m.  [1m-F [22mspecifies the
             format of each line and [1m-f [22ma filter.  Only windows for which the filter is true are shown.  See the [4mFORMATS[24m section.

     [1mmove-pane [22m[[1m-bdfhv[22m] [[1m-l [4m[22msize[24m] [[1m-s [4m[22msrc-pane[24m] [[1m-t [4m[22mdst-pane[24m]
                   (alias: [1mmovep[22m)
             Does the same as [1mjoin-pane[22m.

     [1mmove-window [22m[[1m-abrdk[22m] [[1m-s [4m[22msrc-window[24m] [[1m-t [4m[22mdst-window[24m]
                   (alias: [1mmovew[22m)
             This is similar to [1mlink-window[22m, except the window at [4msrc-window[24m is moved to [4mdst-window[24m.  With [1m-r[22m, all windows in the session are renum‚Äê
             bered in sequential order, respecting the [1mbase-index [22moption.

     [1mnew-window [22m[[1m-abdkPS[22m] [[1m-c [4m[22mstart-directory[24m] [[1m-e [4m[22menvironment[24m] [[1m-F [4m[22mformat[24m] [[1m-n [4m[22mwindow-name[24m] [[1m-t [4m[22mtarget-window[24m] [[4mshell-command[24m]
                   (alias: [1mneww[22m)
             Create a new window.  With [1m-a [22mor [1m-b[22m, the new window is inserted at the next index after or before the specified [4mtarget-window[24m, moving
             windows up if necessary; otherwise [4mtarget-window[24m is the new window location.

             If [1m-d [22mis given, the session does not make the new window the current window.  [4mtarget-window[24m represents the window to be created; if the
             target already exists an error is shown, unless the [1m-k [22mflag is used, in which case it is destroyed.  If [1m-S [22mis given and a window named
             [4mwindow-name[24m already exists, it is selected (unless [1m-d [22mis also given in which case the command does nothing).

             [4mshell-command[24m is the command to execute.  If [4mshell-command[24m is not specified, the value of the [1mdefault-command [22moption is used.  [1m-c [22mspeci‚Äê
             fies the working directory in which the new window is created.

             When the shell command completes, the window closes.  See the [1mremain-on-exit [22moption to change this behaviour.

             [1m-e [22mtakes the form ‚ÄòVARIABLE=value‚Äô and sets an environment variable for the newly created window; it may be specified multiple times.

             The TERM environment variable must be set to ‚Äòscreen‚Äô or ‚Äòtmux‚Äô for all programs running [4minside[24m [1mtmux[22m.  New windows will automatically
             have ‚ÄòTERM=screen‚Äô added to their environment, but care must be taken not to reset this in shell start-up files or by the [1m-e [22moption.

             The [1m-P [22moption prints information about the new window after it has been created.  By default, it uses the format
             ‚Äò#{session_name}:#{window_index}‚Äô but a different format may be specified with [1m-F[22m.

     [1mnext-layout [22m[[1m-t [4m[22mtarget-window[24m]
                   (alias: [1mnextl[22m)
             Move a window to the next layout and rearrange the panes to fit.

     [1mnext-window [22m[[1m-a[22m] [[1m-t [4m[22mtarget-session[24m]
                   (alias: [1mnext[22m)
             Move to the next window in the session.  If [1m-a [22mis used, move to the next window with an alert.

     [1mpipe-pane [22m[[1m-IOo[22m] [[1m-t [4m[22mtarget-pane[24m] [[4mshell-command[24m]
                   (alias: [1mpipep[22m)
             Pipe output sent by the program in [4mtarget-pane[24m to a shell command or vice versa.  A pane may only be connected to one command at a time,
             any existing pipe is closed before [4mshell-command[24m is executed.  The [4mshell-command[24m string may contain the special character sequences sup‚Äê
             ported by the [1mstatus-left [22moption.  If no [4mshell-command[24m is given, the current pipe (if any) is closed.

             [1m-I [22mand [1m-O [22mspecify which of the [4mshell-command[24m output streams are connected to the pane: with [1m-I [22mstdout is connected (so anything
             [4mshell-command[24m prints is written to the pane as if it were typed); with [1m-O [22mstdin is connected (so any output in the pane is piped to
             [4mshell-command[24m).  Both may be used together and if neither are specified, [1m-O [22mis used.

             The [1m-o [22moption only opens a new pipe if no previous pipe exists, allowing a pipe to be toggled with a single key, for example:

                   bind-key C-p pipe-pane -o 'cat >>~/output.#I-#P'

     [1mprevious-layout [22m[[1m-t [4m[22mtarget-window[24m]
                   (alias: [1mprevl[22m)
             Move to the previous layout in the session.

     [1mprevious-window [22m[[1m-a[22m] [[1m-t [4m[22mtarget-session[24m]
                   (alias: [1mprev[22m)
             Move to the previous window in the session.  With [1m-a[22m, move to the previous window with an alert.

     [1mrename-window [22m[[1m-t [4m[22mtarget-window[24m] [4mnew-name[0m
                   (alias: [1mrenamew[22m)
             Rename the current window, or the window at [4mtarget-window[24m if specified, to [4mnew-name[24m.

     [1mresize-pane [22m[[1m-DLMRTUZ[22m] [[1m-t [4m[22mtarget-pane[24m] [[1m-x [4m[22mwidth[24m] [[1m-y [4m[22mheight[24m] [[4madjustment[24m]
                   (alias: [1mresizep[22m)
             Resize a pane, up, down, left or right by [4madjustment[24m with [1m-U[22m, [1m-D[22m, [1m-L [22mor [1m-R[22m, or to an absolute size with [1m-x [22mor [1m-y[22m.  The [4madjustment[24m is
             given in lines or columns (the default is 1); [1m-x [22mand [1m-y [22mmay be a given as a number of lines or columns or followed by ‚Äò%‚Äô for a percent‚Äê
             age of the window size (for example ‚Äò-x 10%‚Äô).  With [1m-Z[22m, the active pane is toggled between zoomed (occupying the whole of the window)
             and unzoomed (its normal position in the layout).

             [1m-M [22mbegins mouse resizing (only valid if bound to a mouse key binding, see [4mMOUSE[24m [4mSUPPORT[24m).

             [1m-T [22mtrims all lines below the current cursor position and moves lines out of the history to replace them.

     [1mresize-window [22m[[1m-aADLRU[22m] [[1m-t [4m[22mtarget-window[24m] [[1m-x [4m[22mwidth[24m] [[1m-y [4m[22mheight[24m] [[4madjustment[24m]
                   (alias: [1mresizew[22m)
             Resize a window, up, down, left or right by [4madjustment[24m with [1m-U[22m, [1m-D[22m, [1m-L [22mor [1m-R[22m, or to an absolute size with [1m-x [22mor [1m-y[22m.  The [4madjustment[24m is
             given in lines or cells (the default is 1).  [1m-A [22msets the size of the largest session containing the window; [1m-a [22mthe size of the smallest.
             This command will automatically set [1mwindow-size [22mto manual in the window options.

     [1mrespawn-pane [22m[[1m-k[22m] [[1m-c [4m[22mstart-directory[24m] [[1m-e [4m[22menvironment[24m] [[1m-t [4m[22mtarget-pane[24m] [[4mshell-command[24m]
                   (alias: [1mrespawnp[22m)
             Reactivate a pane in which the command has exited (see the [1mremain-on-exit [22mwindow option).  If [4mshell-command[24m is not given, the command
             used when the pane was created or last respawned is executed.  The pane must be already inactive, unless [1m-k [22mis given, in which case any
             existing command is killed.  [1m-c [22mspecifies a new working directory for the pane.  The [1m-e [22moption has the same meaning as for the
             [1mnew-window [22mcommand.

     [1mrespawn-window [22m[[1m-k[22m] [[1m-c [4m[22mstart-directory[24m] [[1m-e [4m[22menvironment[24m] [[1m-t [4m[22mtarget-window[24m] [[4mshell-command[24m]
                   (alias: [1mrespawnw[22m)
             Reactivate a window in which the command has exited (see the [1mremain-on-exit [22mwindow option).  If [4mshell-command[24m is not given, the command
             used when the window was created or last respawned is executed.  The window must be already inactive, unless [1m-k [22mis given, in which case
             any existing command is killed.  [1m-c [22mspecifies a new working directory for the window.  The [1m-e [22moption has the same meaning as for the
             [1mnew-window [22mcommand.

     [1mrotate-window [22m[[1m-DUZ[22m] [[1m-t [4m[22mtarget-window[24m]
                   (alias: [1mrotatew[22m)
             Rotate the positions of the panes within a window, either upward (numerically lower) with [1m-U [22mor downward (numerically higher).  [1m-Z [22mkeeps
             the window zoomed if it was zoomed.

     [1mselect-layout [22m[[1m-Enop[22m] [[1m-t [4m[22mtarget-pane[24m] [[4mlayout-name[24m]
                   (alias: [1mselectl[22m)
             Choose a specific layout for a window.  If [4mlayout-name[24m is not given, the last preset layout used (if any) is reapplied.  [1m-n [22mand [1m-p [22mare
             equivalent to the [1mnext-layout [22mand [1mprevious-layout [22mcommands.  [1m-o [22mapplies the last set layout if possible (undoes the most recent layout
             change).  [1m-E [22mspreads the current pane and any panes next to it out evenly.

     [1mselect-pane [22m[[1m-DdeLlMmRUZ[22m] [[1m-T [4m[22mtitle[24m] [[1m-t [4m[22mtarget-pane[24m]
                   (alias: [1mselectp[22m)
             Make pane [4mtarget-pane[24m the active pane in its window.  If one of [1m-D[22m, [1m-L[22m, [1m-R[22m, or [1m-U [22mis used, respectively the pane below, to the left, to
             the right, or above the target pane is used.  [1m-Z [22mkeeps the window zoomed if it was zoomed.  [1m-l [22mis the same as using the [1mlast-pane [22mcom‚Äê
             mand.  [1m-e [22menables or [1m-d [22mdisables input to the pane.  [1m-T [22msets the pane title.

             [1m-m [22mand [1m-M [22mare used to set and clear the [4mmarked[24m [4mpane[24m.  There is one marked pane at a time, setting a new marked pane clears the last.
             The marked pane is the default target for [1m-s [22mto [1mjoin-pane[22m, [1mmove-pane[22m, [1mswap-pane [22mand [1mswap-window[22m.

     [1mselect-window [22m[[1m-lnpT[22m] [[1m-t [4m[22mtarget-window[24m]
                   (alias: [1mselectw[22m)
             Select the window at [4mtarget-window[24m.  [1m-l[22m, [1m-n [22mand [1m-p [22mare equivalent to the [1mlast-window[22m, [1mnext-window [22mand [1mprevious-window [22mcommands.  If [1m-T[0m
             is given and the selected window is already the current window, the command behaves like [1mlast-window[22m.

     [1msplit-window [22m[[1m-bdfhIvPZ[22m] [[1m-c [4m[22mstart-directory[24m] [[1m-e [4m[22menvironment[24m] [[1m-l [4m[22msize[24m] [[1m-t [4m[22mtarget-pane[24m] [[4mshell-command[24m] [[1m-F [4m[22mformat[24m]
                   (alias: [1msplitw[22m)
             Create a new pane by splitting [4mtarget-pane[24m: [1m-h [22mdoes a horizontal split and [1m-v [22ma vertical split; if neither is specified, [1m-v [22mis assumed.
             The [1m-l [22moption specifies the size of the new pan